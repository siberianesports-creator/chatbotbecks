"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import aiohttp
import json
import base64
from typing import Optional, Dict, Any
from loguru import logger

from config import (
    OPENROUTER_API_KEY, 
    GEMINI_API_KEY, 
    OPENROUTER_BASE_URL, 
    GEMINI_BASE_URL
)


class AIServices:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self):
        self.openrouter_api_key = OPENROUTER_API_KEY
        self.gemini_api_key = GEMINI_API_KEY
        self.openrouter_url = OPENROUTER_BASE_URL
        self.gemini_url = GEMINI_BASE_URL
    
    async def get_openrouter_response(self, prompt: str, model: str = "anthropic/claude-3.5-sonnet") -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç AI –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            headers = {
                "Authorization": f"Bearer {self.openrouter_api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/siberianesports-creator/chatbotbecks",
                "X-Title": "ChatBot Becks"
            }
            
            data = {
                "model": model,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.7
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.openrouter_url}/chat/completions",
                    headers=headers,
                    json=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["choices"][0]["message"]["content"]
                    else:
                        logger.error(f"OpenRouter API error: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error calling OpenRouter API: {e}")
            return None
    
    async def analyze_image_with_gemini(self, image_data: bytes, prompt: str = "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Google Gemini
        
        Args:
            image_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            prompt: –ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "Content-Type": "application/json"
            }
            
            data = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": prompt
                            },
                            {
                                "inline_data": {
                                    "mime_type": "image/jpeg",
                                    "data": image_base64
                                }
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.4,
                    "topK": 32,
                    "topP": 1,
                    "maxOutputTokens": 2048,
                }
            }
            
            url = f"{self.gemini_url}/gemini-2.0-flash-exp:generateContent?key={self.gemini_api_key}"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if "candidates" in result and result["candidates"]:
                            return result["candidates"][0]["content"]["parts"][0]["text"]
                        else:
                            logger.error("No response from Gemini API")
                            return None
                    else:
                        logger.error(f"Gemini API error: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error calling Gemini API: {e}")
            return None
    
    async def get_smart_response(self, user_message: str, context: str = "") -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            
        Returns:
            –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
        """
        prompt = f"""
–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π Telegram –±–æ—Ç ChatBot Becks. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Å —ç–º–æ–¥–∑–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–û—Ç–≤–µ—Ç—å –∫–∞–∫ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
- –î–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
- –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤.
"""
        
        response = await self.get_openrouter_response(prompt)
        if response:
            return response.strip()
        else:
            # Fallback –æ—Ç–≤–µ—Ç
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! ü§ñ"
    
    async def analyze_product_from_image(self, image_data: bytes) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        
        Args:
            image_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        """
        prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç/–æ–±—ä–µ–∫—Ç
2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
3. –í–æ–∑–º–æ–∂–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
    "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "characteristics": ["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞1", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞2"],
    "usage": "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
}
"""
        
        response = await self.analyze_image_with_gemini(image_data, prompt)
        if response:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if "{" in response and "}" in response:
                    start = response.find("{")
                    end = response.rfind("}") + 1
                    json_str = response[start:end]
                    return json.loads(json_str)
                else:
                    return {
                        "product_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
                        "description": response,
                        "characteristics": [],
                        "usage": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                    }
            except json.JSONDecodeError:
                return {
                    "product_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
                    "description": response,
                    "characteristics": [],
                    "usage": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                }
        else:
            return {
                "product_name": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å",
                "description": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "characteristics": [],
                "usage": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_services = AIServices()
